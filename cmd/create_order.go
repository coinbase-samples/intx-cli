/**
 * Copyright 2024-present Coinbase Global, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cmd

import (
	"fmt"
	"github.com/coinbase-samples/intx-cli/utils"
	"github.com/coinbase-samples/intx-sdk-go"
	"github.com/google/uuid"
	"github.com/spf13/cobra"
)

var createOrderCmd = &cobra.Command{
	Use:   "create-order",
	Short: "Create an order.",
	RunE: func(cmd *cobra.Command, args []string) error {
		client, err := utils.GetClientFromEnv()
		if err != nil {
			return fmt.Errorf("failed to initialize client: %w", err)
		}

		clientOrderId := utils.GetFlagStringValue(cmd, utils.ClientOrderIdFlag)
		if clientOrderId == "" {
			clientOrderId = uuid.New().String()
		}

		portfolioId, err := utils.GetPortfolioId(cmd, client)
		if err != nil {
			return err
		}

		ctx, cancel := utils.GetContextWithTimeout()
		defer cancel()

		request := &intx.CreateOrderRequest{
			ClientOrderId: clientOrderId,
			PortfolioId:   portfolioId,
			InstrumentId:  utils.GetFlagStringValue(cmd, utils.InstrumentIdFlag),
			Side:          utils.GetFlagStringValue(cmd, utils.SideFlag),
			Size:          utils.GetFlagStringValue(cmd, utils.SizeFlag),
			Tif:           utils.GetFlagStringValue(cmd, utils.TifFlag),
			Type:          utils.GetFlagStringValue(cmd, utils.TypeFlag),
			Price:         utils.GetFlagStringValue(cmd, utils.LimitPriceFlag),
			StopPrice:     utils.StringPtr(utils.GetFlagStringValue(cmd, utils.StopPriceFlag)),
			ExpireTime:    utils.StringPtr(utils.GetFlagStringValue(cmd, utils.ExpiryTimeFlag)),
			UserId:        utils.StringPtr(utils.GetFlagStringValue(cmd, utils.UserIdFlag)),
			StpMode:       utils.StringPtr(utils.GetFlagStringValue(cmd, utils.StpModeFlag)),
			PostOnly:      utils.GetFlagBoolValue(cmd, utils.PostOnlyFlag),
		}

		response, err := client.CreateOrder(ctx, request)
		if err != nil {
			return fmt.Errorf("cannot create order: %w", err)
		}

		jsonResponse, err := utils.FormatResponseAsJson(cmd, response)
		if err != nil {
			return err
		}

		fmt.Println(jsonResponse)

		return nil
	},
}

func init() {
	rootCmd.AddCommand(createOrderCmd)

	createOrderCmd.Flags().StringP(utils.InstrumentIdFlag, "i", "", "ID of the Instrument, e.g. ETH-USDC (Required)")
	createOrderCmd.Flags().StringP(utils.SideFlag, "s", "", "Order side, e.g. BUY (Required)")
	createOrderCmd.Flags().StringP(utils.SizeFlag, "b", "", "Order size in base asset units (Required)")
	createOrderCmd.Flags().StringP(utils.TifFlag, "f", "", "Determine order fill strategy")
	createOrderCmd.Flags().StringP(utils.TypeFlag, "t", "", "Type of the order, e.g. MARKET (Required)")
	createOrderCmd.Flags().StringP(utils.LimitPriceFlag, "l", "", "Limit price for the order")
	createOrderCmd.Flags().StringP(utils.StopPriceFlag, "p", "", "Stop price for the order")
	createOrderCmd.Flags().StringP(utils.ExpiryTimeFlag, "", "", "The expiry time of the order in UTC (TWAP and limit GTD only)")
	createOrderCmd.Flags().StringP(utils.UserIdFlag, "u", "", "User ID for order")
	createOrderCmd.Flags().StringP(utils.StpModeFlag, "", "", "STP mode for order")
	createOrderCmd.Flags().StringP(utils.PostOnlyFlag, "", "", "Post only mode bool for order")
	createOrderCmd.Flags().StringP(utils.PortfolioIdFlag, "", "", "Portfolio ID. Uses environment variable if blank")
	createOrderCmd.Flags().StringP(utils.ClientOrderIdFlag, "c", "", "Client order id value. Autogenerated if blank")
	createOrderCmd.Flags().StringP(utils.FormatFlag, "z", "false", "Pass true for formatted JSON. Default is false")

	createOrderCmd.MarkFlagRequired(utils.InstrumentIdFlag)
	createOrderCmd.MarkFlagRequired(utils.SideFlag)
	createOrderCmd.MarkFlagRequired(utils.SizeFlag)
	createOrderCmd.MarkFlagRequired(utils.TypeFlag)
	createOrderCmd.MarkFlagRequired(utils.TifFlag)
}
